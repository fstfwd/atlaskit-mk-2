image: node:8.4.0
# This ensures we do a full clone on each build which prevents issues when cross referencing
# changesets and releases
clone:
  depth: full
options:
  size: 2x

pipelines:
  branches:
    master:
      - step:
          script:
            # Note: in master, this script will rebase you onto latest origin/master
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - (cd build/ci-scripts && yarn stop-if-older-build)
            - yarn build
            - yarn lint
            - yarn typecheck
            - yarn test
            # Disabled until we find the source of the flakeyness
            # - yarn test:browser:browserstack
            - yarn release
            - (cd build/ci-scripts && yarn restart-stopped-build)
          caches:
            - node

  default:
    - step:
        script:
            - yarn global add "bolt@^0.19.2"
            - bolt
            - echo $BITBUCKET_COMMIT
            - echo "This is a triumph" > luke.txt
            - node build/ci-scripts/upload.build.artefact.for.commit.js luke.txt
            - rm luke.txt
            - node build/ci-scripts/download.build.artefact.for.commit.js luke.txt
            - echo luke.text

    # - parallel:
    #     - step:
    #         name: Building dists
    #         script:
    #           - yarn global add bolt
    #           - bolt
    #           - yarn build
    #         caches:
    #           - node
    #     - step:
    #         name: Lint + Typecheck
    #         script:
    #           - yarn global add bolt
    #           - bolt
    #           - yarn lint
    #           - yarn typecheck
    #         caches:
    #           - node
    #     - step:
    #         name: Testing
    #         script:
    #           # We do this git dance so that we can run test:changed which compares our branch against master
    #           - git fetch origin master
    #           - git checkout master # (master doesn't exist until we do this checkout)
    #           - git checkout - # checks out the previous ref
    #           - yarn global add bolt
    #           - bolt
    #           - yarn test:changed
    #         caches:
    #           - node
    #     - step:
    #         name: Building website
    #         script:
    #           - apt-get -y update
    #           - apt-get -y install zip
    #           - yarn global add bolt
    #           - bolt
    #           - set -o pipefail && (cd website && yarn deploy-staging:no-minimize) | tee netlify-build.txt
    #           - node build/ci-scripts/update.build.status.with.netlify.link.js
    #         caches:
    #           - node

  custom: # Pipelines that can be scheduled or triggered manually

    # This should only be called by a scheduled build
    build-website-production:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - (cd website && yarn deploy)
          caches:
            - node

    # This will run with the webdriver tests
    build-webdriver:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - yarn test:webdriver:browserstack:ci

    # This will run essentially the branch builds, but without any optimizations and should be manually
    # run in any potentially risky builds
    run-full-suite:
      - step:
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - yarn build
            - yarn lint
            - yarn typecheck
            - yarn test
            - yarn test:browser:browserstack
            - (cd website && yarn deploy-staging:no-minimize)
    # We deliberately don't use the cache here as well

    landkid:
      - step:
          script:
            - source ./build-setup.sh
            - git merge master --no-edit
            - bolt install --pure-lockfile
            - yarn build
            - yarn lint
            - yarn typecheck
            - yarn test
            # Disabled until we find the source of the flakeyness
            # - yarn test:browser:browserstack

    # This build should only be run on the master branch, once per day.
    # It manually clears the cache and runs a very quick install and test to seed the jest and node_modules
    # We split into two steps so that one can clear the cache so that the second one starts with no cache
    # (Which causes it to upload when it's finished).
    # It's important for this to run fast and whilst nothing else is running, as any other build could
    # seed the cache if they finished in time.
    reseed-pipelines-cache:
      - step:
          name: Clearing old cache
          script:
            - ([[ "$BITBUCKET_BRANCH" == "master" ]]) || (echo "This build should only be run on master" && return 1)
            - cd build/ci-scripts
            - yarn install --pure-lockfile
            - node clear.pipelines.node.cache.js
      - step:
          name: Creating new cache
          script:
            - source ./build-setup.sh
            - bolt install --pure-lockfile
            - yarn test
            # Run this again, just in case someone else has started and finished before us and re-seeded the cache
            - node build/ci-scripts/clear.pipelines.node.cache.js
          caches:
            - node
